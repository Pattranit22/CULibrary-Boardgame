import streamlit as st
from langchain_core.messages import HumanMessage, AIMessage
from curag_final_real import load_data, create_rag_chain  # ‡πÅ‡∏Å‡πâ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå Python ‡∏î‡πâ‡∏≤‡∏ô‡∏ö‡∏ô‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á ‡πÄ‡∏ä‡πà‡∏ô boardgame_rag.py
import asyncio
import nest_asyncio
from datetime import datetime
nest_asyncio.apply()
st.set_page_config(page_title="CULibrary Board game", page_icon="üé≤")
# ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£‡πÅ‡∏•‡∏∞ chain ‡∏ï‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏±‡∏ô
@st.cache_resource
def setup_chain():
    pdf_path = "Data"
    #excel_path = "Data/List_CULibraryBoardgame.xlsx"#
    excel_path = "Data/test.xlsx"
    documents = load_data(pdf_path, excel_path)
    return create_rag_chain(documents)

retrieval_chain = setup_chain()

# UI

st.title("CULibrary Board game")
st.markdown("""
‡∏¢‡∏¥‡∏ô‡∏î‡∏µ‡∏ï‡πâ‡∏≠‡∏ô‡∏£‡∏±‡∏ö‡∏™‡∏π‡πà‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏Å‡∏°‡∏Ç‡∏≠‡∏á‡∏´‡∏≠‡∏™‡∏°‡∏∏‡∏î‡∏Å‡∏•‡∏≤‡∏á‡∏à‡∏∏‡∏¨‡∏≤‡∏•‡∏á‡∏Å‡∏£‡∏ì‡πå‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢!
‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏°‡πÑ‡∏´‡∏ô‡∏ô‡πà‡∏≤‡πÄ‡∏•‡πà‡∏ô ‡∏Å‡∏ï‡∏¥‡∏Å‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á ‡πÄ‡∏•‡πà‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á‡πÉ‡∏´‡πâ‡∏ä‡∏ô‡∏∞ ‡∏´‡∏£‡∏∑‡∏≠‡∏≠‡∏¢‡∏≤‡∏Å‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏Å‡∏°‡∏™‡∏ô‡∏∏‡∏Å‡πÜ 
‡∏£‡∏ß‡∏°‡∏ñ‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏¢‡∏∑‡∏°‡πÄ‡∏Å‡∏°‡∏à‡∏≤‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏°‡∏∏‡∏î‡∏à‡∏∏‡∏¨‡∏≤‡∏Ø ‚Äî ‡∏ñ‡∏≤‡∏°‡πÄ‡∏£‡∏≤‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢! üòÑ
""")

st.markdown("‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ö‡∏ó‡∏™‡∏ô‡∏ó‡∏ô‡∏≤")  # Section title in Thai
starter_question = None
col1, col2 = st.columns(2)
with col1:
    if st.button("‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢"):
        starter_question = "‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏Å‡∏°‡πÉ‡∏´‡πâ‡∏´‡∏ô‡πà‡∏≠‡∏¢"
with col2:
    if st.button("‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏Å‡∏° Sheriff of Nottingham "):
        starter_question = "‡∏≠‡∏¢‡∏≤‡∏Å‡∏£‡∏π‡πâ‡∏£‡∏µ‡∏ß‡∏¥‡∏ß‡πÄ‡∏Å‡∏° Sheriff of Nottingham"

col3, col4 = st.columns(2)
with col3:
    if st.button("‡πÄ‡∏Å‡∏° DiXit ‡πÄ‡∏•‡πà‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á"):
        starter_question = "‡πÄ‡∏Å‡∏° DiXit ‡πÄ‡∏•‡πà‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á"
with col4:
    if st.button("‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏Å‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á"):
        starter_question = "‡∏ö‡∏≠‡∏£‡πå‡∏î‡πÄ‡∏Å‡∏°‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡πâ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏ô‡πÑ‡∏´‡∏ô‡∏ö‡πâ‡∏≤‡∏á"

# ‡πÄ‡∏Å‡πá‡∏ö‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó
if "chat_history" not in st.session_state:
    st.session_state.chat_history = []

# ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡πÅ‡∏ä‡∏ó‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ **‡∏Å‡πà‡∏≠‡∏ô** input ‡πÉ‡∏´‡∏°‡πà)
for msg in st.session_state.chat_history:
    if isinstance(msg, HumanMessage):
        st.chat_message("user").markdown(msg.content)
    elif isinstance(msg, AIMessage):
        st.chat_message("assistant").markdown(msg.content)

# Input ‡∏Å‡∏•‡πà‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
user_input = st.chat_input("Ask me anything about board games...")
if starter_question:
    current_datetime = datetime.now().strftime("%A, %d %B %Y %H:%M")
    st.session_state.chat_history.append(HumanMessage(content=starter_question))

    response = retrieval_chain.invoke({
        "input": starter_question,
        "chat_history": st.session_state.chat_history,
        "current_datetime": current_datetime
    })

    ai_msg = response["answer"]
    st.session_state.chat_history.append(AIMessage(content=ai_msg))

    st.chat_message("user").markdown(starter_question)
    st.chat_message("assistant").markdown(ai_msg)

if user_input:
    current_datetime = datetime.now().strftime("%A, %d %B %Y %H:%M")
    # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥
    st.session_state.chat_history.append(HumanMessage(content=user_input))
    
    # ‡∏™‡πà‡∏á‡πÑ‡∏õ‡∏ó‡∏µ‡πà RAG
    response = retrieval_chain.invoke({
        "input": user_input,
        "chat_history": st.session_state.chat_history,
        "current_datetime": current_datetime})

    ai_msg = response["answer"]
    st.session_state.chat_history.append(AIMessage(content=ai_msg))

    # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î‡∏ó‡∏±‡∏ô‡∏ó‡∏µ (optional ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡πÅ‡∏™‡∏î‡∏á‡πÉ‡∏ô loop ‡∏Ç‡πâ‡∏≤‡∏á‡∏ö‡∏ô‡πÅ‡∏•‡πâ‡∏ß)
    st.chat_message("user").markdown(user_input)
    st.chat_message("assistant").markdown(ai_msg)

#streamlit run c:/Users/Pattranit/RAG/Data/app.py#
